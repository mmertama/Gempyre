@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

# Create imported target gempyre::gempyre
add_library(gempyre::gempyre INTERFACE IMPORTED)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

if(WIN32)
    set(CMAKE_PREFIX_PATH "C:/Program Files (x86);C:/Program Files;${CMAKE_PREFIX_PATH}")
    find_path(SYSTEM_GEMPYRE_INSTALL gempyre REQUIRED)
    get_filename_component(PARENT_DIR ${SYSTEM_GEMPYRE_INSTALL} DIRECTORY)
    set(ABSOLUTE_INSTALL_PREFIX "${PARENT_DIR}") 
else()
    find_path(SYSTEM_GEMPYRE_INSTALL gempyre PATHS /usr/local/include /usr/include)
    get_filename_component(PARENT_DIR ${SYSTEM_GEMPYRE_INSTALL} DIRECTORY)
    set(ABSOLUTE_INSTALL_PREFIX "${PARENT_DIR}")
 endif()   

if(WIN32)
    message("Gempyre for WIN32")
    set(GEMPYRE_PATH "C:/Program Files (x86)/gempyre/lib/gempyre;C:/Program Files/gempyre/lib/gempyre;${CMAKE_PREFIX_PATH};${CMAKE_PREFIX_PATH}/${CMAKE_INSTALL_LIBDIR}")
elseif(RASPBERRY)
    message("Gempyre for Raspberry")
    # this could be done prettier?
    set(CMAKE_PREFIX_PATH "/usr/local/lib/gempyre;/usr/local/lib/aarch64-linux-gnu/gempyre;${CMAKE_PREFIX_PATH}")
    set(GEMPYRE_PATH "/usr/local/lib/gempyre;/usr/local/lib/aarch64-linux-gnu/gempyre")
    find_package(Threads)
else()
    set(GEMPYRE_PATH "${ABSOLUTE_INSTALL_PREFIX}/lib/gempyre") # Otherwise find_library for gempyre wont work
    set(CMAKE_PREFIX_PATH "${ABSOLUTE_INSTALL_PREFIX}/lib/gempyre;${CMAKE_PREFIX_PATH}") # Otherwise usockets wont found
    find_package(Threads)
endif()

set(library_search_paths "@LIBRARY_FULL_DIR@" ${GEMPYRE_PATH} "${CMAKE_INSTALL_PREFIX}/@LIBRARY_FULL_DIR@" ${CMAKE_INSTALL_LIBDIR})
# Since msvc and mingw libraries are located in the same folder we have to be explicit with naming.
find_library(LIB_NAME_DEBUG NAMES ${CMAKE_STATIC_LIBRARY_PREFIX}gempyred${CMAKE_STATIC_LIBRARY_SUFFIX} PATHS ${library_search_paths} NO_DEFAULT_PATH)
if(LIB_NAME_DEBUG)
    message("Found debug libraries ${gempyre_LIBRARIES}")
else()
    message("Not found debug info libraries")    
endif()

find_library(LIB_NAME NAMES ${CMAKE_STATIC_LIBRARY_PREFIX}gempyre${CMAKE_STATIC_LIBRARY_SUFFIX} PATHS ${library_search_paths}  NO_DEFAULT_PATH)
if(LIB_NAME)
    message("Found release libraries ${gempyre_LIBRARIES}")
else()
    message("Not found release libraries")    
endif()

find_library(LIB_NAME_RELWITHDEBINFO NAMES ${CMAKE_STATIC_LIBRARY_PREFIX}gempyrerd${CMAKE_STATIC_LIBRARY_SUFFIX} PATHS ${library_search_paths} NO_DEFAULT_PATH)
if( LIB_NAME_RELWITHDEBINFO )
    message("Found rel with debug info libraries ${gempyre_LIBRARIES}")
else()
    message("Not found rel with debug info libraries")
endif()    

find_library(LIB_NAME_DEBUG_MINSIZEREL NAMES ${CMAKE_STATIC_LIBRARY_PREFIX}gempyrers${CMAKE_STATIC_LIBRARY_SUFFIX} PATHS ${library_search_paths}  NO_DEFAULT_PATH)
if( LIB_NAME_RELWITHDEBINFO )
    message("Found min size release libraries ${gempyre_LIBRARIES}")
else()
    message("Not found in size release libraries")
endif()    

#despite its name it is not legacy!
set_and_check(gempyre_legacy_INCLUDE_DIR "${ABSOLUTE_INSTALL_PREFIX}/@INCLUDE_FULL_DIR@")
set_and_check(gempyre_LIBRARY_DIR "${ABSOLUTE_INSTALL_PREFIX}/@LIBRARY_FULL_DIR@")
set(ENV{gempyre_ROOT} "@PROJECT_CMAKE_DIR@")

add_library(gempyre::gempyre_lib STATIC IMPORTED)

if (NOT LIB_NAME)
    message(FATAL_ERROR "Cannot find gempyre library from ${library_search_paths}")
endif()

if (NOT LIB_NAME_DEBUG)
    set(LIB_NAME_DEBUG ${LIB_NAME})
endif()

if (NOT LIB_NAME_RELWITHDEBINFO)
    set(LIB_NAME_RELWITHDEBINFO ${LIB_NAME})
endif()

if (NOT LIB_NAME_DEBUG_MINSIZEREL)
    set(LIB_NAME_DEBUG_MINSIZEREL ${LIB_NAME})
endif()



set_target_properties(gempyre::gempyre_lib PROPERTIES
    IMPORTED_LOCATION_RELEASE "${LIB_NAME}"
    IMPORTED_LOCATION_DEBUG "${LIB_NAME_DEBUG}"
    IMPORTED_LOCATION_RELWITHDEBINFO "${LIB_NAME_RELWITHDEBINFO}"
    IMPORTED_LOCATION_MINSIZEREL "${LIB_NAME_DEBUG_MINSIZEREL}"
    )

if(@USE_UWEBSOCKETS@)
    message("USE UWEBSOCKETS")
    if(WIN32)
        add_library(gempyre::gempyre_uv STATIC IMPORTED)
    elseif(RASPBERRY)
        add_library(gempyre::gempyre_uv STATIC IMPORTED)
    else()
        add_library(gempyre::gempyre_usock STATIC IMPORTED)
    endif()
    include(uwebsockets_config)
elseif(@USE_LIBWEBSOCKETS@)
    message("USE LIBWEBSOCKETS")
    include(libwebsockets_config)
    message("looking @GEMPYRE_WS_LIB_NAME_CORE@ HINTS @GEMPYRE_COMMON_LIBDIR@")
    find_library(WS NAMES @GEMPYRE_WS_LIB_NAME_CORE@ @GEMPYRE_WS_LIB_NAME_CORE_RELEASE@ PATHS "@GEMPYRE_COMMON_LIBDIR@")
    if (NOT WS)
        message("find library failed with websockets, try guesses location: @GEMPYRE_WS_LIB_FULL@")
        if (NOT EXISTS "@GEMPYRE_WS_LIB_FULL@")
            message(FATAL_ERROR "websockets not found despite all efforts")
        endif()
        set(WS "@GEMPYRE_WS_LIB_FULL@")
    endif()
    message("websocket is set to ${WS}")
    add_library(gempyre::gempyre_ws STATIC IMPORTED)
    set_target_properties(gempyre::gempyre_ws PROPERTIES
            INTERFACE_INCLUDE_DIRECTORIES ""
            INTERFACE_LINK_LIBRARIES "${WS}"
            IMPORTED_LOCATION "${WS}"
            IMPORTED_LOCATION_DEBUG "${WS}" 
    )
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_link_options(gempyre::gempyre INTERFACE "-Wl,--whole-archive" ${WS} "-Wl,--no-whole-archive")
    endif()
else()
    message(WARNING "No Websockets")          
endif()

if(WIN32)
    
    if(MSVC)
        set_target_properties(gempyre::gempyre_lib PROPERTIES
            INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:psapi.lib>;\$<LINK_ONLY:userenv.lib>;\$<LINK_ONLY:iphlpapi.lib>;\$<LINK_ONLY:Shlwapi.lib>;\$<LINK_ONLY:ws2_32.lib>"
        )
    else()
        set_target_properties(gempyre::gempyre_lib PROPERTIES
            INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:psapi.lib>;\$<LINK_ONLY:userenv.lib>;\$<LINK_ONLY:iphlpapi.lib>;\$<LINK_ONLY:ws2_32.lib>;\$<LINK_ONLY:Shlwapi.lib>"
            )
        if(@USE_UWEBSOCKETS@)
            set_target_properties(gempyre::gempyre_uv PROPERTIES
                INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:psapi.lib>;\$<LINK_ONLY:userenv.lib>;\$<LINK_ONLY:iphlpapi.lib>;\$<LINK_ONLY:ws2_32.lib>"
            )
        endif()

    endif() 


    if (@USE_UWEBSOCKETS@)
        set(gempyre_libs gempyre::gempyre_uv)
    elseif(@USE_LIBWEBSOCKETS@)
        set(gempyre_libs gempyre::gempyre_ws)            
    endif()

    set_target_properties(gempyre::gempyre 
        PROPERTIES INTERFACE_LINK_LIBRARIES "${CMAKE_THREAD_LIBS_INIT};${gempyre_libs};gempyre::gempyre_lib"
        )

elseif(RASPBERRY)

    if (@USE_UWEBSOCKETS@)
        if(NOT ${gempyre::gempyre_uv} ) 
            message(FATAL_ERROR "gempyre_uv not found")
        endif()
        set(gempyre_libs gempyre::gempyre_uv)
     elseif(@USE_LIBWEBSOCKETS@)
        set(gempyre_libs gempyre::gempyre_ws)                 
    endif()

    
    set(gempyre_libs "${CMAKE_THREAD_LIBS_INIT};${gempyre_libs};gempyre::gempyre_lib" )    

    set_target_properties(gempyre::gempyre PROPERTIES
        INTERFACE_LINK_LIBRARIES "${gempyre_libs}"
        )           
else()

    if(EMSCRIPTEN)
        set_target_properties(gempyre::gempyre PROPERTIES
            INTERFACE_LINK_LIBRARIES  "gempyre::gempyre_lib"
            )       
    else()

        if(@USE_UWEBSOCKETS@)
            set_target_properties(gempyre::gempyre_usock PROPERTIES
                IMPORTED_LOCATION "${uSockets_LIBRARY}"
                IMPORTED_LOCATION_DEBUG "${uSockets_LIBRARY}" 
                )
            set(gempyre_libs gempyre::gempyre_usock)         
        elseif(@USE_LIBWEBSOCKETS@)
            set(gempyre_libs gempyre::gempyre_ws)          
        endif()

        set_target_properties(gempyre::gempyre PROPERTIES
            INTERFACE_LINK_LIBRARIES "${CMAKE_THREAD_LIBS_INIT};${gempyre_libs};gempyre::gempyre_lib")
    endif()                

   
endif()


check_required_components(@PROJECT_NAME@)

include_directories(${gempyre_legacy_INCLUDE_DIR})
